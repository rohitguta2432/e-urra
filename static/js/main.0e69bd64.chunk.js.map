{"version":3,"sources":["logo.svg","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","useState","mobile","password","user","setUser","inputEvent","e","target","name","value","preValue","className","onSubmit","event","preventDefault","console","log","Axios","post","then","response","status","catch","error","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,yLC2D5BC,MAxDf,WAAkB,IAAD,EACWC,mBAAS,CAC7BC,OAAQ,GACRC,SAAU,KAHD,mBACNC,EADM,KACAC,EADA,KAMPC,EAAa,SAACC,GAAO,IAAD,EACEA,EAAEC,OAAlBC,EADc,EACdA,KAAMC,EADQ,EACRA,MACdL,GAAQ,SAACM,GACL,OAAO,2BACAA,GADP,kBAEKF,EAAOC,QAkBpB,OAEI,6BAASE,UAAU,oCACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,0BAAMA,UAAU,YAAYC,SApB/B,SAACC,GACdA,EAAMC,iBACNC,QAAQC,IAAIb,GACCc,IAAMC,KAAK,2DAA4D,CAAE,OAAU,MAAQf,EAAKF,OAAQ,SAAYE,EAAKD,WACjIiB,MAAK,SAAAC,GACoB,KAAnBA,EAASC,QACRN,QAAQC,IAAI,cAGnBM,OAAM,SAAAC,GACHR,QAAQC,IAAIO,QAWA,yBAAKZ,UAAU,cACX,2BAAOA,UAAU,SAAjB,iBACA,2BAAOA,UAAU,eAAea,KAAK,OAAOC,YAAY,eAAejB,KAAK,SAASkB,SAAUrB,EAAYI,MAAON,EAAKF,UAE3H,yBAAKU,UAAU,cACX,2BAAOA,UAAU,SAAjB,YACA,2BAAOA,UAAU,eAAea,KAAK,WAAWC,YAAY,WAAWjB,KAAK,WAAWkB,SAAUrB,EAAYI,MAAON,EAAKD,YAE7H,yBAAKS,UAAU,mBACX,2BAAOA,UAAU,eAAea,KAAK,SAASf,MAAM,kBClCrEkB,MATf,WACE,OACE,oCACI,kBAAC,EAAD,QCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAMoB,c","file":"static/js/main.0e69bd64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\nimport './Login.css'\nimport Axios from 'axios';\nfunction Login() {\n    const [user, setUser] = useState({\n        mobile: '',\n        password: ''\n    })\n\n    const inputEvent = (e) => {\n        const { name, value } = e.target;\n        setUser((preValue) => {\n            return {\n                ...preValue,\n                [name]: value,\n            }\n        })\n    }\n    const onSubmit = (event) => {\n        event.preventDefault();\n        console.log(user)\n        const data = Axios.post('http://localhost:8081/api/v1/field-operations/auth/login', { 'mobile': '+91' + user.mobile, 'password': user.password })\n            .then(response => {\n                if(response.status == 200){\n                    console.log('success')\n                }\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n\n        <section className=\"loginForm py-5 position-relative\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <form className=\"formLogin\" onSubmit={onSubmit}>\n                            <div className=\"form-group\">\n                                <label className=\"w-100\">Mobile Number</label>\n                                <input className=\"form-control\" type=\"text\" placeholder=\"Enter Number\" name=\"mobile\" onChange={inputEvent} value={user.mobile} />\n                            </div>\n                            <div className=\"form-group\">\n                                <label className=\"w-100\">Password</label>\n                                <input className=\"form-control\" type=\"password\" placeholder=\"Password\" name=\"password\" onChange={inputEvent} value={user.password} />\n                            </div>\n                            <div className=\"form-group mb-0\">\n                                <input className=\"form-control\" type=\"submit\" value=\"Submit\" />\n                            </div>\n                        </form>\n\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/Login/Login';\n\nfunction App() {\n  return (\n    <>\n        <Login/>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}